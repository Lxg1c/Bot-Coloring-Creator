services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    env_file:
      - .env
    networks:
      - coloring-network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_MESSAGE_MAX_BYTES: 36700160
      KAFKA_REPLICA_FETCH_MAX_BYTES: 36700160
      KAFKA_MAX_REQUEST_SIZE: 36700160
      KAFKA_DEFAULT_TOPIC_MAX_MESSAGE_BYTES: 36700160
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - zookeeper
    networks:
      - coloring-network

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka
    networks:
      - coloring-network

  bot:
    build:
      context: ./Bot-Coloring-Creator
      dockerfile: Dockerfile
    container_name: tg-bot
    env_file:
      - .env
    depends_on:
      - kafka
    networks:
      - coloring-network

  backend:
    build:
      context: ./apiColoringCreator
      dockerfile: Dockerfile
    container_name: coloring-backend
    env_file:
      - .env
    depends_on:
      - kafka
    networks:
      - coloring-network


networks:
  coloring-network:
    name: coloring-network