from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards import get_confirm_keyboard
from ai import handle_prompt as generate_coloring
from shared import logger

router = Router(name=__name__)


# üíæ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class GenStates(StatesGroup):
    waiting_for_input = State()


# üì∑üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
@router.message(F.photo | (F.document & F.document.mime_type.startswith("image/")))
async def handle_image(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} sent an image")

    file_id = message.photo[-1].file_id if message.photo else message.document.file_id

    await state.set_state(GenStates.waiting_for_input)
    await state.update_data(file_id=file_id, input_type="image")

    await message.answer_photo(
        photo=file_id,
        caption="–≠—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?",
        reply_markup=get_confirm_keyboard()
    )


@router.message(F.text)
async def handle_text(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} sent a prompt")

    await state.set_state(GenStates.waiting_for_input)
    await state.update_data(prompt=message.text, input_type="text")

    await message.answer(
        text=f"{message.text}\n\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–∫—Ä–∞—Å–∫—É —Å —ç—Ç–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º?",
        reply_markup=get_confirm_keyboard()
    )


# ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@router.callback_query(F.data == "confirm_image")
async def handle_confirm(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} confirmed input")

    await callback.answer("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–∫—Ä–∞—Å–∫—É...")

    data = await state.get_data()
    input_type = data.get("input_type")

    if input_type == "text":
        prompt = data.get("prompt")
        if not prompt:
            await callback.message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        photo = await generate_coloring(prompt)
        if isinstance(photo, str):
            await callback.message.answer(f"‚ùå {photo}")
        else:
            await callback.message.answer_photo(photo=photo, caption="üé® –í–æ—Ç –≤–∞—à–∞ —Ä–∞—Å–∫—Ä–∞—Å–∫–∞!")

    elif input_type == "image":
        file_id = data.get("file_id")
        if not file_id:
            await callback.message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        await callback.message.answer("üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # await some_image_handler(file_id)

    await state.clear()


# ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞
@router.callback_query(F.data == "edit_image")
async def handle_edit(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} chose to edit")
    await state.clear()
    await callback.answer("‚úèÔ∏è –•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.")


# ‚ùå –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
@router.callback_query(F.data == "cancel_image")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} canceled input")
    await state.clear()
    await callback.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
